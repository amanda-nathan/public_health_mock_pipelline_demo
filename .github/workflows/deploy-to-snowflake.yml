name: Deploy to Snowflake

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
  SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
  SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
  SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
  SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
  SNOWFLAKE_DATABASE: PUBLIC_HEALTH_MODERNIZATION_DEMO

jobs:
  validate-sql:
    runs-on: ubuntu-latest
    name: Validate SQL Scripts
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install snowflake-connector-python
        
    - name: Basic SQL validation
      run: |
        echo "âœ… SQL files found:"
        find sql/ -name "*.sql" -type f
        echo "âœ… Basic validation complete"

  deploy-to-prod:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: validate-sql
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Snowflake connector
      run: pip install snowflake-connector-python
      
    - name: Test Snowflake Connection
      run: |
        python -c "
        import snowflake.connector
        import os
        
        print('ðŸ”— Testing Snowflake connection...')
        conn = snowflake.connector.connect(
            user=os.environ['SNOWFLAKE_USER'],
            password=os.environ['SNOWFLAKE_PASSWORD'],
            account=os.environ['SNOWFLAKE_ACCOUNT'],
            role=os.environ['SNOWFLAKE_ROLE'],
            warehouse=os.environ['SNOWFLAKE_WAREHOUSE']
        )
        
        cursor = conn.cursor()
        cursor.execute('SELECT CURRENT_USER(), CURRENT_ROLE(), CURRENT_WAREHOUSE()')
        result = cursor.fetchone()
        print(f'âœ… Connected as: {result[0]} with role: {result[1]} using warehouse: {result[2]}')
        
        cursor.close()
        conn.close()
        print('ðŸŽ‰ Connection test successful!')
        "
        
    - name:
