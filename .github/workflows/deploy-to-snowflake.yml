name: Deploy to Snowflake

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
  SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
  SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
  SNOWFLAKE_DATABASE: PUBLIC_HEALTH_MODERNIZATION_DEMO

jobs:
  validate-sql:
    runs-on: ubuntu-latest
    name: Validate SQL Scripts
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install snowflake-connector-python
        
    - name: Basic SQL validation
      run: |
        echo "‚úÖ Repository structure:"
        find . -name "*.sql" -type f || echo "No SQL files found yet"
        find . -name "*.py" -type f || echo "No Python files found yet"
        echo "‚úÖ Basic validation complete"

  deploy-to-prod:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: validate-sql
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Snowflake connector
      run: pip install snowflake-connector-python
      
    - name: Test Snowflake Connection
      run: |
        python -c "
        import snowflake.connector
        import os
        
        print('üîó Testing Snowflake connection...')
        try:
            conn = snowflake.connector.connect(
                user=os.environ['SNOWFLAKE_USER'],
                password=os.environ['SNOWFLAKE_PASSWORD'],
                account=os.environ['SNOWFLAKE_ACCOUNT'],
                role='ACCOUNTADMIN',
                warehouse='COMPUTE_WH'
            )
            
            cursor = conn.cursor()
            cursor.execute('SELECT CURRENT_USER(), CURRENT_ROLE(), CURRENT_WAREHOUSE()')
            result = cursor.fetchone()
            print(f'‚úÖ Connected as: {result[0]} with role: {result[1]} using warehouse: {result[2]}')
            
            cursor.close()
            conn.close()
            print('üéâ Connection test successful!')
        except Exception as e:
            print(f'‚ùå Connection failed: {e}')
            raise
        "
        
    - name: Deploy Database Structure
      run: |
        python -c "
        import snowflake.connector
        import os
        
        try:
            conn = snowflake.connector.connect(
                user=os.environ['SNOWFLAKE_USER'],
                password=os.environ['SNOWFLAKE_PASSWORD'],
                account=os.environ['SNOWFLAKE_ACCOUNT'],
                role='ACCOUNTADMIN',
                warehouse='COMPUTE_WH'
            )
            
            cursor = conn.cursor()
            
            print('üèóÔ∏è Deploying database structure...')
            
            with open('sql/ddl/01_setup_roles_and_db.sql', 'r') as f:
                setup_sql = f.read()
            
            commands = [cmd.strip() for cmd in setup_sql.split(';') if cmd.strip()]
            
            success_count = 0
            for cmd in commands:
                try:
                    cursor.execute(cmd)
                    print(f'‚úÖ {cmd[:60]}...')
                    success_count += 1
                except Exception as e:
                    print(f'‚ö†Ô∏è {cmd[:60]}... - {str(e)[:100]}')
            
            cursor.close()
            conn.close()
            print(f'üéâ Database structure deployment complete! {success_count}/{len(commands)} commands succeeded')
            
        except Exception as e:
            print(f'‚ùå Database deployment failed: {e}')
            raise
        "
        
    - name: Deploy DDL Scripts
      run: |
        python scripts/deploy_ddl.py prod
      env:
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_DEPLOY_ROLE }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_DEPLOY_WAREHOUSE }}

    - name: Deploy Masking Policies  
      run: |
        python scripts/deploy_masking_policies.py prod
      env:
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_DEPLOY_ROLE }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_DEPLOY_WAREHOUSE }}

    - name: Deploy Stored Procedures
      run: |
        python scripts/deploy_procedures.py prod
      env:
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_DEPLOY_ROLE }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_DEPLOY_WAREHOUSE }}

    - name: Test Complete Pipeline
      run: |
        python scripts/run_tests.py bootstrap
      env:
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_DEPLOY_ROLE }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_DEPLOY_WAREHOUSE }}