name: Deploy to Snowflake

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
  SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
  SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
  SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
  SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
  SNOWFLAKE_DATABASE: PUBLIC_HEALTH_MODERNIZATION_DEMO

jobs:
  validate-sql:
    runs-on: ubuntu-latest
    name: Validate SQL Scripts
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install snowflake-connector-python
        
    - name: Basic SQL validation
      run: |
        echo "‚úÖ Repository structure:"
        find . -name "*.sql" -type f || echo "No SQL files found yet"
        find . -name "*.py" -type f || echo "No Python files found yet"
        echo "‚úÖ Basic validation complete"

  deploy-to-prod:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: validate-sql
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Snowflake connector
      run: pip install snowflake-connector-python
      
    - name: Test Snowflake Connection
      run: |
        python -c "
        import snowflake.connector
        import os
        
        print('üîó Testing Snowflake connection...')
        try:
            conn = snowflake.connector.connect(
                user=os.environ['SNOWFLAKE_USER'],
                password=os.environ['SNOWFLAKE_PASSWORD'],
                account=os.environ['SNOWFLAKE_ACCOUNT'],
                role=os.environ['SNOWFLAKE_ROLE'],
                warehouse=os.environ['SNOWFLAKE_WAREHOUSE']
            )
            
            cursor = conn.cursor()
            cursor.execute('SELECT CURRENT_USER(), CURRENT_ROLE(), CURRENT_WAREHOUSE()')
            result = cursor.fetchone()
            print(f'‚úÖ Connected as: {result[0]} with role: {result[1]} using warehouse: {result[2]}')
            
            cursor.close()
            conn.close()
            print('üéâ Connection test successful!')
        except Exception as e:
            print(f'‚ùå Connection failed: {e}')
            raise
        "
        
    - name: Deploy Database Structure
      run: |
        python -c "
        import snowflake.connector
        import os
        
        try:
            conn = snowflake.connector.connect(
                user=os.environ['SNOWFLAKE_USER'],
                password=os.environ['SNOWFLAKE_PASSWORD'],
                account=os.environ['SNOWFLAKE_ACCOUNT'],
                role=os.environ['SNOWFLAKE_ROLE'],
                warehouse=os.environ['SNOWFLAKE_WAREHOUSE']
            )
            
            cursor = conn.cursor()
            
            print('üèóÔ∏è Deploying database structure...')
            
            setup_commands = [
                'USE ROLE ACCOUNTADMIN',
                'USE WAREHOUSE COMPUTE_WH',
                'CREATE DATABASE IF NOT EXISTS PUBLIC_HEALTH_MODERNIZATION_DEMO',
                'CREATE SCHEMA IF NOT EXISTS PUBLIC_HEALTH_MODERNIZATION_DEMO.LANDING_RAW',
                'CREATE SCHEMA IF NOT EXISTS PUBLIC_HEALTH_MODERNIZATION_DEMO.CURATED', 
                'CREATE SCHEMA IF NOT EXISTS PUBLIC_HEALTH_MODERNIZATION_DEMO.DATA_MART',
                'CREATE SCHEMA IF NOT EXISTS PUBLIC_HEALTH_MODERNIZATION_DEMO.LOGGING',
                'CREATE WAREHOUSE IF NOT EXISTS DEV_WH WITH WAREHOUSE_SIZE = \\'XSMALL\\' AUTO_SUSPEND = 60 AUTO_RESUME = TRUE',
                'CREATE WAREHOUSE IF NOT EXISTS PROD_WH WITH WAREHOUSE_SIZE = \\'SMALL\\' AUTO_SUSPEND = 300 AUTO_RESUME = TRUE',
                'CREATE ROLE IF NOT EXISTS DATA_ENGINEER_ROLE',
                'CREATE ROLE IF NOT EXISTS DATA_ANALYST_ROLE',
                'CREATE ROLE IF NOT EXISTS PUBLIC_HEALTH_ROLE',
                'GRANT USAGE ON DATABASE PUBLIC_HEALTH_MODERNIZATION_DEMO TO ROLE DATA_ENGINEER_ROLE',
                'GRANT ALL ON SCHEMA PUBLIC_HEALTH_MODERNIZATION_DEMO.LANDING_RAW TO ROLE DATA_ENGINEER_ROLE',
                'GRANT ALL ON SCHEMA PUBLIC_HEALTH_MODERNIZATION_DEMO.CURATED TO ROLE DATA_ENGINEER_ROLE',
                'GRANT ALL ON SCHEMA PUBLIC_HEALTH_MODERNIZATION_DEMO.DATA_MART TO ROLE DATA_ENGINEER_ROLE',
                'GRANT ALL ON SCHEMA PUBLIC_HEALTH_MODERNIZATION_DEMO.LOGGING TO ROLE DATA_ENGINEER_ROLE',
                'GRANT USAGE ON WAREHOUSE DEV_WH TO ROLE DATA_ENGINEER_ROLE',
                'GRANT USAGE ON WAREHOUSE PROD_WH TO ROLE DATA_ENGINEER_ROLE',
                'GRANT ROLE DATA_ENGINEER_ROLE TO USER HATTAWAY7',
                'GRANT ROLE DATA_ANALYST_ROLE TO USER HATTAWAY7',
                'GRANT ROLE PUBLIC_HEALTH_ROLE TO USER HATTAWAY7',
                'ALTER USER HATTAWAY7 SET DEFAULT_ROLE = \\'DATA_ENGINEER_ROLE\\''
            ]
            
            success_count = 0
            for cmd in setup_commands:
                try:
                    cursor.execute(cmd)
                    print(f'‚úÖ {cmd[:60]}...')
                    success_count += 1
                except Exception as e:
                    print(f'‚ö†Ô∏è {cmd[:60]}... - {str(e)[:100]}')
            
            cursor.close()
            conn.close()
            print(f'üéâ Database structure deployment complete! {success_count}/{len(setup_commands)} commands succeeded')
            
        except Exception as e:
            print(f'‚ùå Database deployment failed: {e}')
            raise
        "
        
    - name: Verify Deployment
      run: |
        python -c "
        import snowflake.connector
        import os
        
        try:
            conn = snowflake.connector.connect(
                user=os.environ['SNOWFLAKE_USER'],
                password=os.environ['SNOWFLAKE_PASSWORD'],
                account=os.environ['SNOWFLAKE_ACCOUNT'],
                role=os.environ['SNOWFLAKE_ROLE'],
                warehouse=os.environ['SNOWFLAKE_WAREHOUSE']
            )
            
            cursor = conn.cursor()
            
            print('üîç Verifying deployment...')
            
            # Check database exists
            cursor.execute('SHOW DATABASES LIKE \\'PUBLIC_HEALTH_MODERNIZATION_DEMO\\'')
            db_result = cursor.fetchone()
            if db_result:
                print(f'‚úÖ Database exists: {db_result[1]}')
            
            # Check schemas exist
            cursor.execute('USE DATABASE PUBLIC_HEALTH_MODERNIZATION_DEMO')
            cursor.execute('SHOW SCHEMAS')
            schemas = cursor.fetchall()
            schema_names = [schema[1] for schema in schemas if schema[1] in ['LANDING_RAW', 'CURATED', 'DATA_MART', 'LOGGING']]
            schema_list = ', '.join(schema_names)
            print(f'‚úÖ Found schemas: {schema_list}')
            
            # Check roles
            cursor.execute('SHOW GRANTS TO USER HATTAWAY7')
            grants = cursor.fetchall()
            roles = [grant[1] for grant in grants if grant[0] == 'ROLE']
            role_list = ', '.join(roles)
            print(f'‚úÖ User has roles: {role_list}')
            
            cursor.close()
            conn.close()
            print('üéâ Bootstrap verification complete!')
            
        except Exception as e:
            print(f'‚ùå Verification failed: {e}')
            raise
        "